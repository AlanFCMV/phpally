<?php

use CidiLabs\PhpAlly\Youtube;
use GuzzleHttp\Client;
use GuzzleHttp\Psr7\Response;

class YoutubeTest extends PhpAllyTestCase {

    private $link_url = 'https://www.youtube.com/watch?v=1xZxxVlu7BM';

    public function testCaptionsMissing()
    {
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": []
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsMissing($link_url), 0);
    }

    public function testCaptionsMissingHasCaptions()
    {
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": [
                {
                    "snippet": {
                        "trackKind": "asr",
                        "language": "es"
                    }
                },
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "es-419"
                    }
                }
            ]
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsMissing($link_url), 2);
    }

    public function testCaptionsLanguageFail(){
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": [
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "es"
                    }
                },
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "es-419"
                    }
                }
            ]
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsLanguage($link_url), 0);
    }

    public function testCaptionsLanguageSuccess(){
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": [
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "en"
                    }
                },
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "es-419"
                    }
                }
            ]
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsLanguage($link_url), 2);
    }

    public function testCaptionsAutoGeneratedFailure(){
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": [
                {
                    "snippet": {
                        "trackKind": "asr",
                        "language": "en"
                    }
                }
            ]
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsAutoGenerated($link_url), 0);
    }

    public function testCaptionsAutoGeneratedSuccess(){
        $link_url = $this->link_url;
        $client = new \GuzzleHttp\Client(['http_errors' => false]);
        $string = '{
            "items": [
                {
                    "snippet": {
                        "trackKind": "asr",
                        "language": "ru"
                    }
                },
                {
                    "snippet": {
                        "trackKind": "standard",
                        "language": "es-419"
                    }
                }
            ]
        }';
        $response = new Response(200, ['Content-Type' => 'application/json'], $string);

        $youtubeMock = $this->getMockBuilder(Youtube::class)
             ->setConstructorArgs([$client, 'en', 'testApiKey'])
             ->setMethods(array('getVideoData'))
             ->getMock(); 

        $youtubeMock->expects($this->once())
            ->method('getVideoData')
            ->will($this->returnValue($response));

        $this->assertEquals($youtubeMock->captionsAutoGenerated($link_url), 2);
    }

}
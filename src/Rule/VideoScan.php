<?php

namespace CidiLabs\PhpAlly\Rule;

use DOMElement;
use CidiLabs\PhpAlly;
use CidiLabs\PhpAlly\Video\Vimeo;
use CidiLabs\PhpAlly\Video\Youtube;
use CidiLabs\PhpAlly\Video\Kaltura;
use GuzzleHttp\Client;

/**
*	
*/
class VideoScan extends BaseRule
{

    const YOUTUBE_VIDEO = 1;
    const VIMEO_VIDEO = 2;
    CONST KALTURA_VIDEO = 3;

    private $serviceType = null;

    public function id()
    {
        return self::class;
    }

    public function check()
    {
        foreach ($this->getAllElements(array('a', 'embed', 'iframe', 'script')) as $video) {
			$attr = ($video->tagName == 'a') ? 'href' : 'src';
			if ($video->hasAttribute($attr)) {     
                // Get URL
                $attr_val = $video->getAttribute($attr);
                // Get provider (Youtube, Vimeo, or Kaltura class)
                $provider = $this->getVideoProvider($attr_val);
                // Get caption data
                $captionData = $provider->getVideoData($attr_val);
                
                if($captionData && $provider) {
                    $this->checkCaptionsExist($captionData, $provider);
                    $this->checkCaptionsLanguage($captionData, $provider);
                    $this->checkCaptionsAutoGenerated($captionData, $provider);
                }
			}
		}
    }

    // Scan rule functions

    // VideosEmbeddedOrLinkedNeedCaptions
    public function checkCaptionsExist($captionData, $provider)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsMissing')) {
            return $provider->captionsMissing($captionData);
        }   

        return false;
    }

    // VideoCaptionsMatchCourseLanguage
    public function checkCaptionsLanguage($captionData, $provider)
    {
        // Use provider to call
        if (method_exists($provider, 'captionsLanguage')) {
            return $provider->captionsLanguage($captionData); 
        }

        return false;
    }

    // CaptionsAutoGenerated
    public function checkCaptionsAutoGenerated($captionData, $provider)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsAutoGenerated')) {
            return $provider->captionsAutoGenerated($captionData);
        }

        return false;
    }

    // Helpers

    public function getVideoProvider($url)
    {
        $search_youtube = '/(youtube|youtu.be)/';
		$search_vimeo = '/(vimeo)/';
		$search_kaltura = '/(kaltura)/';

        if (preg_match($search_youtube, $url)) {
            $this->serviceType = self::YOUTUBE_VIDEO;
			return new Youtube(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['youtubeApiKey']);
		} elseif (preg_match($search_vimeo, $url)) {
            $this->serviceType = self::VIMEO_VIDEO;
			return new Vimeo(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['vimeoApiKey']);
		} else if (preg_match($search_kaltura, $url)) {
            $this->serviceType = self::KALTURA_VIDEO;
			return new Kaltura($this->lang, $this->options['kalturaApiKey'], $this->options['kalturaUsername']);
		}

        return false;
    }
}
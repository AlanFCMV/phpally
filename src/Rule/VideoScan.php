<?php

namespace CidiLabs\PhpAlly\Rule;

use DOMElement;
use CidiLabs\PhpAlly;
use CidiLabs\PhpAlly\Video\Vimeo;
use CidiLabs\PhpAlly\Video\Youtube;
use CidiLabs\PhpAlly\Video\Kaltura;
use GuzzleHttp\Client;

/**
*	
*/
class VideoScan extends BaseRule
{
    const FAIL = 0;
	const FAILED_CONNECTION = 1;
	const SUCCESS = 2;

    public $youtube = null;
    public $vimeo = null;
    public $kaltura = null;

    public function id()
    {
        return self::class;
    }

    public function check()
    {
        foreach ($this->getAllElements(array('a', 'embed', 'iframe', 'script')) as $video) {
			$attr = ($video->tagName == 'a') ? 'href' : 'src';
			if ($video->hasAttribute($attr)) {     
                // Get URL
                $attr_val = $video->getAttribute($attr);
                // Get provider (Youtube, Vimeo, or Kaltura class)
                $provider = $this->getVideoProvider($attr_val);
                // Get caption data
                $captionData = $this->getCaptionData($attr_val, $provider);
                
                if(isset($captionData) && isset($provider)) {
                    $this->checkCaptionsExist($captionData, $provider, $video);
                    $this->checkCaptionsLanguage($captionData, $provider, $video);
                    $this->checkCaptionsAutoGenerated($captionData, $provider, $video);
                }
			}
		}

        return count($this->issues);
    }

    // Scan rule functions

    // VideosEmbeddedOrLinkedNeedCaptions
    public function checkCaptionsExist($captionData, $provider, $video)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsMissing')) {
            $captionState = $provider->captionsMissing($captionData);
            
            if ($captionState != self::SUCCESS) {
                $this->setIssue($video, 'VideosEmbeddedOrLinkedNeedCaptions');
            }
        }   
    }

    // VideoCaptionsMatchCourseLanguage
    public function checkCaptionsLanguage($captionData, $provider, $video)
    {
        // Use provider to call
        if (method_exists($provider, 'captionsLanguage')) {
            $captionState = $provider->captionsLanguage($captionData);
            
            if ($captionState != self::SUCCESS) {
                $this->setIssue($video, 'VideoCaptionsMatchCourseLanguage');
            }
        }
    }

    // CaptionsAutoGenerated
    public function checkCaptionsAutoGenerated($captionData, $provider, $video)
    {
        // Use provider to call 
        if (method_exists($provider, 'captionsAutoGenerated')) {
            $captionState = $provider->captionsAutoGenerated($captionData);

            if ($captionState != self::SUCCESS) {
                $this->setIssue($video, 'VideosHaveAutoGeneratedCaptions');
            }
        }
    }

    // Helpers

    public function getVideoProvider($url)
    {
        $search_youtube = '/(youtube|youtu.be)/';
		$search_vimeo = '/(vimeo)/';
		$search_kaltura = '/(kaltura)/';

        if (preg_match($search_youtube, $url)) {
            if (!isset($this->youtube)) {
                $this->youtube = new Youtube(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['youtubeApiKey']);
            }
            return $this->youtube;
		} elseif (preg_match($search_vimeo, $url)) {
            if (!isset($this->vimeo)) {
                $this->vimeo = new Vimeo(new \GuzzleHttp\Client(['http_errors' => false]), $this->lang, $this->options['vimeoApiKey']);
            }
            return $this->vimeo;
		} else if (preg_match($search_kaltura, $url)) {
            if (!isset($this->kaltura)) {
                $this->kaltura = new Kaltura($this->lang, $this->options['kalturaApiKey'], $this->options['kalturaUsername']);
            }
            return $this->kaltura;
		}

        return null;
    }

    public function getCaptionData($url, $provider)
    {
        if (isset($provider)) {
            return $provider->getVideoData($url);
        }

        return null;
    }
}